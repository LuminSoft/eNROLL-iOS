// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name EnrollFramework
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1
import AVFoundation
import AVKit
import Combine
import CommonCrypto
import CoreLocation
import CryptoKit
import DeveloperToolsSupport
@_exported import EnrollFramework
import Foundation
import MapKit
import QuartzCore
import Swift
import SwiftUI
import UIKit
import UserNotifications
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum EliteOTPAnimationTypes {
  case flipFromRight
  case flipFromLeft
  case flash
  case shake
  case rotate
  case expand
  case crossDissolve
  case curlDown
  case curlUp
  case none
  public static func == (a: EnrollFramework.EliteOTPAnimationTypes, b: EnrollFramework.EliteOTPAnimationTypes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class EliteOTPField : UIKit.UITextField {
  @_Concurrency.MainActor @preconcurrency final public var spacing: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency final public var slotCount: Swift.UInt
  @_Concurrency.MainActor @preconcurrency final public var slotCornerRaduis: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency final public var slotPlaceHolder: Swift.String
  @_Concurrency.MainActor @preconcurrency final public var slotFontType: UIKit.UIFont
  @_Concurrency.MainActor @preconcurrency final public var slotPlaceHolderFontType: UIKit.UIFont
  @_Concurrency.MainActor @preconcurrency final public var filledSlotTextColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency final public var emptySlotTextColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency final public var emptySlotBackgroundColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency final public var filledSlotBackgroundColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency final public var isBorderEnabled: Swift.Bool
  @_Concurrency.MainActor @preconcurrency final public var filledSlotBorderWidth: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency final public var filledSlotBorderColor: CoreGraphics.CGColor
  @_Concurrency.MainActor @preconcurrency final public var emptySlotBorderWidth: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency final public var emptySlotBorderColor: CoreGraphics.CGColor
  @_Concurrency.MainActor @preconcurrency final public var isVibrateEnabled: Swift.Bool
  @_Concurrency.MainActor @preconcurrency final public var isAnimationEnabledOnLastDigit: Swift.Bool
  @_Concurrency.MainActor @preconcurrency final public var animationType: EnrollFramework.EliteOTPAnimationTypes
  @_Concurrency.MainActor @preconcurrency final public var enableUnderLineViews: Swift.Bool
  @_Concurrency.MainActor @preconcurrency final public var underlineViewWidthMultiplier: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency final public var underlineViewHeight: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency final public var underlineViewBottomSpace: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency final public var isFieldVerified: Swift.Bool
  @_Concurrency.MainActor @preconcurrency weak final public var otpDelegete: (any EnrollFramework.EliteOTPFieldDelegete)?
  @_Concurrency.MainActor @preconcurrency final public func build()
  @_Concurrency.MainActor @preconcurrency @objc override final public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency final public func clearAllSlotDigits()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol EliteOTPFieldDelegete : AnyObject {
  func didEnterLastDigit(otp: Swift.String)
  func fieldIsVerified(isVerified: Swift.Bool)
}
public struct Enroll {
  public static func initViewController(enrollInitModel: EnrollFramework.EnrollInitModel, presenterVC: UIKit.UIViewController) -> UIKit.UIViewController
}
@objc @_inheritsConvenienceInitializers @available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public class KeyboardLayoutConstraint : UIKit.NSLayoutConstraint {
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func awakeFromNib()
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
}
public class EnrollColors {
  public init(primary: UIKit.UIColor? = nil, secondary: UIKit.UIColor? = nil, appBackgroundColor: UIKit.UIColor? = nil, textColor: UIKit.UIColor? = nil, errorColor: UIKit.UIColor? = nil, successColor: UIKit.UIColor? = nil, warningColor: UIKit.UIColor? = nil, appWhite: UIKit.UIColor? = nil, appBlack: UIKit.UIColor? = nil)
  @objc deinit
}
public struct EnrollErrorModel {
  public let errorMessage: Swift.String
  public let applicantId: Swift.String?
}
public protocol EnrollCallBack {
  func enrollDidSucceed(with model: EnrollFramework.EnrollSuccessModel)
  func enrollDidFail(with error: EnrollFramework.EnrollErrorModel)
  func didInitializeRequest(with requestId: Swift.String)
}
public enum EnrollMode {
  case onboarding
  case update
  case authentication
  case forget
  case signContarct
  public static func == (a: EnrollFramework.EnrollMode, b: EnrollFramework.EnrollMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension EnrollFramework.EliteOTPField : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor @preconcurrency @objc final public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc final public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor @preconcurrency @objc final public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
}
public struct EnrollSuccessModel {
  public let documentNumber: Swift.String?
  public let applicantId: Swift.String?
}
public enum EnrollForcedDocumentType : Swift.String {
  case passport
  case nationalId
  case deafult
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum EnrollContractSignatureMode : Swift.Int {
  case lowRisk
  case highRisk
  case lowRiskFRA
  case highRiskFRA
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum EnrollContractSignaturetApproach : Swift.Int {
  case applicant
  case oraganization
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct EnrollInitModel {
  public init(tenantId: Swift.String, tenantSecret: Swift.String, enrollEnviroment: EnrollFramework.EnrollEnviroment = .staging, localizationCode: EnrollFramework.LocalizationEnum = .en, enrollCallBack: (any EnrollFramework.EnrollCallBack)?, enrollMode: EnrollFramework.EnrollMode, skipTutorial: Swift.Bool? = false, enrollColors: EnrollFramework.EnrollColors? = nil, levelOffTrustId: Swift.String? = nil, applicantId: Swift.String? = nil, correlationId: Swift.String? = nil, updateSteps: [EnrollFramework.EnrollUpdateTypes]? = nil, customFontName: Swift.String? = nil, isEgyptionNationalId: Swift.Bool = false, forcedDocumentType: EnrollFramework.EnrollForcedDocumentType? = EnrollForcedDocumentType.deafult, requestId: Swift.String?, contractTemplateId: Swift.Int?, signContarctParam: Swift.String?) throws
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor @preconcurrency public static let modelName: Swift.String
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func addSubviews(_ views: UIKit.UIView...)
}
extension Foundation.Date {
  public func add(days: Swift.Int) -> Foundation.Date
  public func differenceInDaysWithDate(date: Foundation.Date) -> Swift.Int
  public init?(fromString string: Swift.String, format: EnrollFramework.DateFormatType, timeZone: EnrollFramework.TimeZoneType = .local, locale: Foundation.Locale = Foundation.Locale.current)
  public func toString(style: EnrollFramework.DateStyleType = .short) -> Swift.String
  public func getDifferenceInHours(sinceDate: Foundation.Date) -> Swift.Int?
  public func getDifferenceInDays(sinceDate: Foundation.Date) -> Swift.Int?
  public func toString(format: EnrollFramework.DateFormatType, timeZone: EnrollFramework.TimeZoneType = .local, locale: Foundation.Locale = Locale.current) -> Swift.String
  public func toString(dateStyle: Foundation.DateFormatter.Style, timeStyle: Foundation.DateFormatter.Style, isRelative: Swift.Bool = false, timeZone: Foundation.TimeZone = Foundation.NSTimeZone.local, locale: Foundation.Locale = Locale.current) -> Swift.String
  public func toStringWithRelativeTime(strings: [EnrollFramework.RelativeTimeStringType : Swift.String]? = nil) -> Swift.String
  public func toStringWithRelativeTimeFormat(strings: [EnrollFramework.RelativeTimeStringType : Swift.String]? = nil) -> Swift.String
  public func compare(_ comparison: EnrollFramework.DateComparisonType) -> Swift.Bool
  public func adjust(_ component: EnrollFramework.DateComponentType, offset: Swift.Int) -> Foundation.Date
  public func adjust(hour: Swift.Int?, minute: Swift.Int?, second: Swift.Int?, day: Swift.Int? = nil, month: Swift.Int? = nil) -> Foundation.Date
  public func dateFor(_ type: EnrollFramework.DateForType, calendar: Foundation.Calendar = Calendar.current) -> Foundation.Date
  public func since(_ date: Foundation.Date, in component: EnrollFramework.DateComponentType) -> Swift.Int64
  public func component(_ component: EnrollFramework.DateComponentType) -> Swift.Int?
  public func numberOfDaysInMonth() -> Swift.Int
  public func firstDayOfWeek() -> Swift.Int
  public func lastDayOfWeek() -> Swift.Int
}
public enum DateFormatType {
  case isoYear
  case isoYearMonth
  case isoDate
  case isoDateTime
  case isoDateTimeSec
  case isoDateTimeMilliSec
  case dotNet
  case rss
  case altRSS
  case httpHeader
  case standard
  case custom(Swift.String)
}
extension EnrollFramework.DateFormatType : Swift.Equatable {
  public static func == (lhs: EnrollFramework.DateFormatType, rhs: EnrollFramework.DateFormatType) -> Swift.Bool
}
public enum TimeZoneType {
  case local, `default`, utc, custom(Swift.Int)
}
public enum RelativeTimeStringType {
  case nowPast, nowFuture, secondsPast, secondsFuture, oneMinutePast, oneMinuteFuture, minutesPast, minutesFuture, oneHourPast, oneHourFuture, hoursPast, hoursFuture, oneDayPast, oneDayFuture, daysPast, daysFuture, oneWeekPast, oneWeekFuture, weeksPast, weeksFuture, oneMonthPast, oneMonthFuture, monthsPast, monthsFuture, oneYearPast, oneYearFuture, yearsPast, yearsFuture
  public static func == (a: EnrollFramework.RelativeTimeStringType, b: EnrollFramework.RelativeTimeStringType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum DateComparisonType {
  case isToday
  case isTomorrow
  case isYesterday
  case isSameDay(as: Foundation.Date)
  case isThisWeek
  case isNextWeek
  case isLastWeek
  case isSameWeek(as: Foundation.Date)
  case isThisMonth
  case isNextMonth
  case isLastMonth
  case isSameMonth(as: Foundation.Date)
  case isThisYear
  case isNextYear
  case isLastYear
  case isSameYear(as: Foundation.Date)
  case isInTheFuture
  case isInThePast
  case isEarlier(than: Foundation.Date)
  case isLater(than: Foundation.Date)
  case isWeekday
  case isWeekend
}
public enum DateComponentType {
  case second, minute, hour, day, weekday, nthWeekday, week, month, year
  public static func == (a: EnrollFramework.DateComponentType, b: EnrollFramework.DateComponentType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum DateForType {
  case startOfDay, endOfDay, startOfWeek, endOfWeek, startOfMonth, endOfMonth, tomorrow, yesterday, nearestMinute(minute: Swift.Int), nearestHour(hour: Swift.Int)
}
public enum DateStyleType {
  case short
  case medium
  case long
  case full
  case ordinalDay
  case weekday
  case shortWeekday
  case veryShortWeekday
  case month
  case shortMonth
  case veryShortMonth
  public static func == (a: EnrollFramework.DateStyleType, b: EnrollFramework.DateStyleType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Veil {
  public struct Config {
    public init(digitChar: Swift.Character, anyChar: Swift.Character, letterChar: Swift.Character = "A")
    public static func defaultConf() -> EnrollFramework.Veil.Config
  }
  convenience public init(pattern string: Swift.String, config: EnrollFramework.Veil.Config = .defaultConf())
  public func mask(input: Swift.String, exhaustive: Swift.Bool = true) -> Swift.String
  public func process(input: Swift.String, exhaustive: Swift.Bool = true) -> (masked: Swift.String, unmasked: Swift.String)
  @objc deinit
}
public enum EnrollEnviroment {
  case production
  case staging
  public static func == (a: EnrollFramework.EnrollEnviroment, b: EnrollFramework.EnrollEnviroment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public func add(_ child: UIKit.UIViewController)
  @_Concurrency.MainActor @preconcurrency public func remove(_ child: UIKit.UIViewController)
}
public enum LocalizationEnum {
  case ar
  case en
  public static func == (a: EnrollFramework.LocalizationEnum, b: EnrollFramework.LocalizationEnum) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum EnrollUpdateTypes : Swift.Int, Swift.Codable {
  case nationalID
  case passport
  case phone
  case email
  case device
  case location
  case securityQuestions
  case password
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum EnrollForgetTypes : Swift.Int, Swift.Codable {
  case phone
  case email
  case device
  case location
  case password
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension EnrollFramework.EliteOTPAnimationTypes : Swift.Equatable {}
extension EnrollFramework.EliteOTPAnimationTypes : Swift.Hashable {}
extension EnrollFramework.EnrollMode : Swift.Equatable {}
extension EnrollFramework.EnrollMode : Swift.Hashable {}
extension EnrollFramework.EnrollForcedDocumentType : Swift.Equatable {}
extension EnrollFramework.EnrollForcedDocumentType : Swift.Hashable {}
extension EnrollFramework.EnrollForcedDocumentType : Swift.RawRepresentable {}
extension EnrollFramework.EnrollContractSignatureMode : Swift.Equatable {}
extension EnrollFramework.EnrollContractSignatureMode : Swift.Hashable {}
extension EnrollFramework.EnrollContractSignatureMode : Swift.RawRepresentable {}
extension EnrollFramework.EnrollContractSignaturetApproach : Swift.Equatable {}
extension EnrollFramework.EnrollContractSignaturetApproach : Swift.Hashable {}
extension EnrollFramework.EnrollContractSignaturetApproach : Swift.RawRepresentable {}
extension EnrollFramework.RelativeTimeStringType : Swift.Equatable {}
extension EnrollFramework.RelativeTimeStringType : Swift.Hashable {}
extension EnrollFramework.DateComponentType : Swift.Equatable {}
extension EnrollFramework.DateComponentType : Swift.Hashable {}
extension EnrollFramework.DateStyleType : Swift.Equatable {}
extension EnrollFramework.DateStyleType : Swift.Hashable {}
extension EnrollFramework.EnrollEnviroment : Swift.Equatable {}
extension EnrollFramework.EnrollEnviroment : Swift.Hashable {}
extension EnrollFramework.LocalizationEnum : Swift.Equatable {}
extension EnrollFramework.LocalizationEnum : Swift.Hashable {}
extension EnrollFramework.EnrollUpdateTypes : Swift.Equatable {}
extension EnrollFramework.EnrollUpdateTypes : Swift.Hashable {}
extension EnrollFramework.EnrollUpdateTypes : Swift.RawRepresentable {}
extension EnrollFramework.EnrollForgetTypes : Swift.Equatable {}
extension EnrollFramework.EnrollForgetTypes : Swift.Hashable {}
extension EnrollFramework.EnrollForgetTypes : Swift.RawRepresentable {}
